<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright @ 2020 Audi AG. All rights reserved.

       This Source Code Form is subject to the terms of the Mozilla
       Public License, v. 2.0. If a copy of the MPL was not distributed
       with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

   If it is not possible or desirable to put the notice in a particular file, then
   You may include the notice in a location (such as a LICENSE file in a
   relevant directory) where a recipient would be likely to look for such a notice.

   You may add additional accurate notices of copyright ownership.
-->
<element_type xmlns="http://fep.vwgroup.com/element/2.0/type">
    <schema_version>2.0.0</schema_version>
    
    <!-- conan package reference -->
    <id>
        <name>RadarSensor</name>
        <version>1.0.0</version>
        <user>user</user>
        <channel>stable</channel>
    </id>
    
    <!-- Name for e. g. GUI -->
    <display_name>Radar Sensor</display_name>       
    
    <description>This is a description of the whole functionality this Element is able to provide.</description>
    <author>fep_team</author>
    
    <!-- defines the configuration interface (properties / parameters with a functional reference) -->
    <configuration_interface>
        <properties>
            <property>
                <name>parameter_1</name>
                <type>int</type>
                <!-- supported types must be defined !-->
                <value>34</value>
            </property>
        </properties>
    </configuration_interface>
    
    <!-- defines the data interface (ins and outs) -->
    <data_interfaces>
        <inputs>
            <input>
                <name>input_value_plain</name>
                <type>
                    <!--supported meta types must be defined -->
                    <metatype_name>plain-ctype</metatype_name>
                    <properties>
                        <property>
                            <name>datatype</name>
                            <type>string</type>
                            <!-- supported types must be defined !-->
                            <value>int8_t</value>
                        </property>
                    </properties>
                </type>
            </input>
            <input>
                <name>input_value_structured</name>
                <type>
                    <metatype_name>ddl</metatype_name>
                    <properties>
                        <property>
                            <name>ddlstruct</name>
                            <type>string</type>
                            <!-- this file must be next to this element_type description file-->
                            <value>tSimpleStruct</value>
                        </property>
                        <property>
                            <name>ddldescription</name>
                            <type>string</type>
                            <!-- here it can be fully described if you want that-->
                            <value></value>
                        </property>
                        <property>
                            <name>ddlfileref</name>
                            <type>filename</type>
                            <!-- this file must be next to this element_type description file-->
                            <!-- all filereferences are related to this file-->
                            <value>./ddl/example.ddl</value>
                        </property>
                    </properties>
                </type>
            </input>
        </inputs>
        <outputs>
            <output>
                <name>output_value_plain</name>
                <type>
                    <metatype_name>plain-array-ctype</metatype_name>
                    <properties>
                        <property>
                            <name>datatype</name>
                            <type>string</type>
                            <value>uint64_t</value>
                        </property>
                        <property>
                            <name>max_array_size</name>
                            <type>uint</type>
                            <value>32</value>
                        </property>
                    </properties>
                </type>
            </output>
            <output>
                <name>output_value_raw</name>
                <type>
                    <metatype_name>anonymous</metatype_name>
                    <properties>
                    </properties>
                </type>
            </output>
        </outputs>
    </data_interfaces>
    
    <timing_interface>
        <jobs>
            <job>
                <name>my_callable_function</name>
                <!-- microseconds in simulation time-->
                <cycle_time>100000</cycle_time>
                <!-- microseconds in simulation of the delay to the cycle begin-->
                <cycle_delay_time>20000</cycle_delay_time>
                <!-- 0 = do not watch 
                     >0 = the run_realtime will be watched (can be cycle_time as amximum) -->
                <max_run_realtime>0</max_run_realtime>
                <!--TS_IGNORE_RUNTIME_VIOLATION,
                /// A warning incident will be published when an operational time violation is detected
                TS_WARN_ABOUT_RUNTIME_VIOLATION,
                /// Configured outputs will not be published when an operational time violation is detected
                TS_SKIP_OUTPUT_PUBLISH,
                /// The job will abort and the error state is set
                TS_SET_STM_TO_ERROR -->
                <run_realtime_violation>TS_IGNORE_RUNTIME_VIOLATION</run_realtime_violation>
                <data_references>
                    <inputs>
                        <input_reference>
                            <name>input_value_plain</name>
                            <queue_size>10</queue_size>
                        </input_reference>
                    </inputs>
                    <outputs>
                        <output_reference>
                            <name>output_value_plain</name>
                            <queue_size>10</queue_size>
                        </output_reference>
                    </outputs>
                </data_references>
            </job>
        </jobs>
    </timing_interface>
    
    <!-- defines the interface provided by this element 
         REMARK: These are interfaces which will have a functional relation for 
         this element. 
          -->
    <service_interfaces>
        <service_interface>
            <name>SensorService</name>
            <type>AUDISensorInterface</type>
            <version>1.0.0</version>
            <interface_description>
                <protocol>JSON-RPC</protocol>
                <file_reference>audi_sensor_interface.json</file_reference>
            </interface_description>
        </service_interface>
    </service_interfaces>
    
    <!--The service interfaces required of the element type. 
        If used within a system description one of the other element instances must provided this interface  -->
    <required_service_interfaces>
        <required_service_interface>
            <type>other_service_type</type>
            <version>2.3.0</version>
            <interface_description>
                <protocol>JSON-RPC</protocol>
                <file_reference>other_service_type.json</file_reference>
            </interface_description>
        </required_service_interface>
    </required_service_interfaces>
</element_type>

